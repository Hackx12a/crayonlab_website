<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crayonlab - Printing Services</title>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css">
    <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
    <link href="https://fonts.cdnfonts.com/css/heaters" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="~/Content/site.css" />
    <link rel="stylesheet" href="~/css/navbar.css" />
    <link rel="stylesheet" href="~/css/footer.css" />

    <style>
        /* Order confirmation styles */
        .order-confirmation-icon {
            position: relative;
            display: inline-block;
            margin-left: 10px;
            cursor: pointer;
        }

        .order-confirmation-badge {
            position: absolute;
            top: -10px;
            right: 8px;
            background-color: #FF8C00; /* Orange background */
            color: white; /* Text color */
            border-radius: 50%; /* Circular shape */
            width: 20px; /* Width */
            height: 20px; /* Height */
            display: flex; /* Flexbox for centering */
            align-items: center; /* Center vertically */
            justify-content: center; /* Center horizontally */
            font-size: 12px; /* Font size */
            border: 2px solid white; /* White border */
        }

        /* Order list styles */
        .order-list-container {
            display: none;
            position: fixed;
            top: 0;
            right: 0;
            width: 400px;
            height: 100%;
            background: white;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            z-index: 100000;
            padding: 20px;
            overflow-y: auto;
        }

        .order-list-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            border-bottom: 1px solid #eee;
            padding: 10px;
        }

        .order-item {
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }

            .order-item:last-child {
                border-bottom: none;
            }

        .order-item-image {
            width: 60px;
            height: 60px;
            object-fit: fill;
            margin-right: 15px;
        }

        .order-item-details {
            flex: 1;
        }

        .order-summary-section {
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid #eee;
        }

        /* Checkout modal improvements */
        .checkout-modal {
            display: none;
            position: fixed;
            z-index: 1002;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .submit-order {
            position: sticky;
            bottom: 0px;
            width: 100%;
            background-color: #fb740f;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 18px;
            font-weight: 600;
            cursor: pointer;
            z-index: 10;
            margin-top: 20px;
        }

        body.modal-open {
            overflow: hidden;
        }
    </style>
</head>
<body>
    <nav>
        <div class="main-container">
            <div class="menu-toggle" id="menu-toggle">
                <i class="bi bi-list"></i>
            </div>
            <div class="logo">
                <img src="~/Content/assets/logo.png" alt="Crayonlab Logo">
            </div>


            <div class="nav-contianer">
                <div class="overlay" id="overlay"></div>
                <ul id="nav-list" class="ul-navbar">

                    <li class="close-button-nav" id="closeButtonNav" style="font-size: 30px;">
                        <i class="bi bi-x"></i>
                    </li>


                    <li>@Html.ActionLink("Home", "Index", "Home")</li>
                    <li>@Html.ActionLink("Shop", "Index", "Shop")</li>
                    <li>@Html.ActionLink("Product", "Index", "Product")</li>
                    <li>@Html.ActionLink("Contact", "Index", "Contact")</li>


                    @if (User.Identity.IsAuthenticated)
            {
                    <li>
                        <form asp-action="Logout" asp-controller="Account" method="post" style="display: inline;">
                            <button type="submit" class="logout-button" style="width: 120px; height: 40px; background-color: #f00; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 16px;">Logout <i class="fas fa-sign-out-alt button-icon"></i></button>
                        </form>
                    </li>

            }

                    <li class="no-underline">
                        <div class="right-icons" style="display: flex; align-items: center;">
                            <div class="logo-right">
                                <img src="~/Content/assets/logo1.png" alt="Secondary Logo">
                            </div>
                            <div class="facebook-icon" style="margin-right: -10px;">
                                <a href="https://www.facebook.com" target="_blank" style="display: flex; justify-content: center; align-items: center; width: 30px; height: 30px; border-radius: 50%; background-color: #fb740f; color: white; text-decoration: none;">
                                    <i class="bi bi-facebook" style="font-size: 15px;"></i>
                                </a>
                            </div>
                            <div class="instagram-icon" style="margin-right: -10px;">
                                <a href="https://www.instagram.com" target="_blank" style="display: flex; justify-content: center; align-items: center; width: 30px; height: 30px; border-radius: 50%; background-color: #fb740f; color: white; text-decoration: none;">
                                    <i class="bi bi-instagram" style="font-size: 15px;"></i>
                                </a>
                            </div>
                            <div class="tiktok-icon">
                                <a href="https://www.tiktok.com" target="_blank" style="display: flex; justify-content: center; align-items: center; width: 30px; height: 30px; border-radius: 50%; background-color: #fb740f; color: white; text-decoration: none; margin-right: 50px;">
                                    <i class="bi bi-tiktok" style="font-size: 15px;"></i>
                                </a>
                            </div>
                        </div>
                    </li>

                </ul>
            </div>

            <div class="cart-icon-container">
                <div class="mobile-search-icon" id="mobileSearchToggle">
                    <i class="bi bi-search"></i>
                </div>
                <div class="search-container">
                    <span class="search-icon" onclick="toggleSearch()"><i class="bi bi-search"></i></span>
                    <input type="text" class="search-input" placeholder="Search..." id="searchInput">
                </div>


                <div class="order-list-icon">
                    <div id="orderListToggle" class="order-toggle-wrapper">
                        <i class="bi bi-file-earmark-text"></i>
                        <span class="order-confirmation-badge" id="orderConfirmationBadge">0</span>
                    </div>
                </div>
                <div class="cart-icon-wrapper">
                    <i class="bi bi-cart" id="cartIcon"></i>
                    <span class="cart-counter" id="cartCounter">0</span>
                </div>
            </div>
        </div>
    </nav>

    <main>
        @RenderBody()
    </main>

    <footer>
        <div class="footer-container">
            <div class="footer-logo">
                <img src="~/Content/assets/logo3.png" alt="Crayonlab Logo">
                <i class="bi bi-facebook"></i>
            </div>

            <div class="footer-links">
                <div class="footer-column">
                    <div class="footer-subscribe">
                        <h3>Subscribe</h3>
                        <form>
                            <input type="email" placeholder="Your e-mail">
                            <button type="submit">Send →</button>
                        </form>
                        <p>Subscribe to our website to receive our discount.</p>
                    </div>
                </div>

                <div class="footer-column">
                    <h4>Products</h4>
                    <ul>
                        <li>Corporate Shirt</li>
                        <li>T-Shirt & Esport Shirt</li>
                        <li>Hoodie Jacket</li>
                        <li>Long Sleeve</li>
                        <li>Jersey Set</li>
                        <li>Embroidery</li>
                    </ul>
                </div>

                <div class="footer-column">
                    <h4>Home</h4>
                    <ul>
                        <li>Shop</li>
                        <li>Categories</li>
                        <li>About</li>
                        <li>Contact</li>
                    </ul>
                </div>

                <div class="footer-column">
                    <h4>Contact Us</h4>
                    <div class="contact-info">
                        <p>Company Name: Crayonlab</p>
                        <p>Email: crayonlab2023@gmail.com</p>
                        <p>Address: Mandaue, Looc, Cebu</p>
                        <p>Contact Number: 0908-629-0972</p>
                    </div>
                </div>

                <div class="footer-column form-column">
                    <h4>Send Message</h4>
                    <form class="contact-form">
                        <input type="text" placeholder="Firstname" required>
                        <input type="text" placeholder="Lastname" required>
                        <input type="tel" placeholder="Contact Number" pattern="^09[0-9]{9}$" required>
                        <textarea placeholder="Message" required></textarea>
                        <button type="submit">Send</button>
                    </form>
                </div>
            </div>

            <div class="footer-bottom">
                <p>© 2024 Crayonlab. Powered by Crayonlab</p>
            </div>
        </div>
    </footer>

    <!-- Shopping Cart Sidebar -->
    <div class="cart-sidebar" id="cartSidebar">
        <div class="cart-header">
            <h3>Your Cart</h3>
            <button class="close-cart" id="closeCartBtn">&times;</button>
        </div>
        <div class="cart-items" id="cartItems">
            <!-- Cart items will be added here dynamically -->
        </div>
        <div class="cart-footer">
            <div class="cart-total">
                <span>Total:</span>
                <span id="cartTotalPrice">₱0.00</span>
            </div>
            <button class="checkout-btn">PROCEED TO CHECKOUT</button>
        </div>
    </div>
    <div class="cart-overlay" id="cartOverlay"></div>

    <!-- Checkout Modal -->
    <div class="checkout-modal" id="checkoutModal">
        <div class="modal-content">
            <span class="close-modal" id="closeModalBtn">&times;</span>
            <h2><i class="bi bi-cart-check"></i> Order Details</h2>

            <div class="cart-summary">
                <h3>Your Items</h3>
                <div class="cart-items-list" id="checkoutCartItems">
                    <!-- Cart items will be displayed here -->
                </div>
                <div class="cart-summary-total">
                    <span>Subtotal:</span>
                    <span id="cartSubtotal">₱0.00</span>
                </div>
            </div>

            <form id="checkoutForm" class="checkout-form">
                <h3><i class="bi bi-person-lines-fill"></i> Customer Information</h3>

                <div class="form-row">
                    <div class="form-group">
                        <label for="firstName"><i class="bi bi-person"></i> First Name:</label>
                        <input type="text" id="firstName" required>
                    </div>
                    <div class="form-group">
                        <label for="lastName"><i class="bi bi-person"></i> Last Name:</label>
                        <input type="text" id="lastName" required>
                    </div>
                </div>

                <div class="form-group">
                    <label for="address"><i class="bi bi-house"></i> Address:</label>
                    <input type="text" id="address" required>
                </div>

                <div class="form-group">
                    <label for="contactNumber"><i class="bi bi-telephone"></i> Contact Number:</label>
                    <input type="tel" id="contactNumber" required>
                </div>

                <div class="form-group">
                    <label for="email"><i class="bi bi-envelope"></i> Email:</label>
                    <input type="email" id="email" required>
                </div>

                <div class="form-group">
                    <label for="paymentMethod"><i class="bi bi-credit-card"></i> Payment Method:</label>
                    <div class="payment-method">
                        <select id="paymentMethod">
                            <option value="cod">Cash on Delivery</option>
                            <option value="gcash" disabled>Gcash (Coming Soon)</option>
                            <option value="paymaya" disabled>Paymaya (Coming Soon)</option>
                        </select>
                    </div>
                </div>

                <div class="order-summary">
                    <h3><i class="bi bi-receipt"></i> Order Summary</h3>
                    <div class="summary-row">
                        <span>Subtotal:</span>
                        <span id="summarySubtotal">₱0.00</span>
                    </div>
                    <div class="summary-row">
                        <span>Shipping:</span>
                        <span id="summaryShipping">₱0.00</span>
                    </div>
                    <div class="summary-row total">
                        <span>Total:</span>
                        <span id="summaryTotal">₱0.00</span>
                    </div>
                </div>

                <button type="submit" class="submit-order">
                    <i class="bi bi-check-circle"></i> Place Order
                </button>
            </form>
        </div>
    </div>

    <!-- Order List Panel -->
    <div class="order-list-container" id="orderListContainer">
        <div class="order-list-header">
            <h3><i class="bi bi-list-check"></i> Your Orders</h3>
            <button id="closeOrderListBtn" class="close-btn">&times;</button>
        </div>
        <div id="orderListContent">
            <!-- Order items will be displayed here -->
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {


            initializeSearch();


            function initializeSearch() {
                const searchInput = document.getElementById('searchInput');
                if (!searchInput) return; // Exit if search input doesn't exist

                // Function to toggle search visibility
                window.toggleSearch = function () {
                    const searchContainer = document.querySelector('.search-container');
                    searchContainer.classList.toggle('active');
                    if (searchContainer.classList.contains('active')) {
                        searchInput.focus();
                    }
                }

                // Handle search input
                searchInput.addEventListener('keyup', function (event) {
                    if (event.key === 'Enter') {
                        performSearch(searchInput.value);
                    }
                });

                //click handler for search icon
                const searchIcon = document.querySelector('.search-icon');
                if (searchIcon) {
                    searchIcon.addEventListener('click', function () {
                        if (searchInput.value.trim() !== '') {
                            performSearch(searchInput.value);
                        }
                    });
                }
            }

            function performSearch(query) {
                if (!query || query.trim() === '') return;

                query = query.trim().toLowerCase();

                // Show loading indicator
                showSearchLoading();

                // Send the search request to server
                fetch(`/Shop/Search?query=${encodeURIComponent(query)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Search request failed');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            displaySearchResults(data.results, query);
                        } else {
                            showSearchError(data.message || 'Search failed');
                        }
                    })
                    .catch(error => {
                        console.error('Search error:', error);
                        showSearchError('An error occurred while searching');
                    })
                    .finally(() => {
                        hideSearchLoading();
                    });
            }

            function displaySearchResults(results, query) {
                // Create modal for search results
                let searchResultsModal = document.getElementById('searchResultsModal');

                if (!searchResultsModal) {
                    searchResultsModal = document.createElement('div');
                    searchResultsModal.id = 'searchResultsModal';
                    searchResultsModal.className = 'search-results-modal';
                    document.body.appendChild(searchResultsModal);
                }

                // Clear previous results
                searchResultsModal.innerHTML = '';

                // Create modal content
                const modalContent = document.createElement('div');
                modalContent.className = 'search-results-content';

                // Create header
                const header = document.createElement('div');
                header.className = 'search-results-header';
                header.innerHTML = `
        <h2>Search Results for "${query}"</h2>
        <span class="close-search-results">&times;</span>
    `;
                modalContent.appendChild(header);

                // Create results container
                const resultsContainer = document.createElement('div');
                resultsContainer.className = 'search-results-container';

                if (results.length === 0) {
                    resultsContainer.innerHTML = '<p class="no-results">No products found matching your search.</p>';
                } else {
                    // Create grid for results
                    const resultsGrid = document.createElement('div');
                    resultsGrid.className = 'search-results-grid';

                    results.forEach(product => {
                        const productCard = document.createElement('div');
                        productCard.className = 'search-result-item';
                        productCard.innerHTML = `
                <a href="/Item/Index?id=${product.id}&name=${encodeURIComponent(product.name)}&frontImage=${encodeURIComponent(product.frontDesign)}${product.backDesign ? '&backImage=' + encodeURIComponent(product.backDesign) : ''}${product.shortsDesign ? '&shortsImage=' + encodeURIComponent(product.shortsDesign) : ''}&menXSPrice=${product.menXSPrice}&menSPrice=${product.menSPrice}&menMPrice=${product.menMPrice}&menLPrice=${product.menLPrice}&menXLPrice=${product.menXLPrice}&menXXLPrice=${product.menXXLPrice}&womenXSPrice=${product.womenXSPrice}&womenSPrice=${product.womenSPrice}&womenMPrice=${product.womenMPrice}&womenLPrice=${product.womenLPrice}&womenXLPrice=${product.womenXLPrice}&womenXXLPrice=${product.womenXXLPrice}">
                    <div class="search-result-image">
                        <img src="/Content/uploads/${product.frontDesign}" alt="${product.name}">
                    </div>
                    <div class="search-result-details">
                        <h3>${product.name}</h3>
                        <p class="search-result-type">${product.shirtTypeName}</p>
                        <p class="search-result-price">From ₱${Math.min(
                            product.menXSPrice, product.menSPrice, product.menMPrice,
                            product.menLPrice, product.menXLPrice, product.menXXLPrice,
                            product.womenXSPrice, product.womenSPrice, product.womenMPrice,
                            product.womenLPrice, product.womenXLPrice, product.womenXXLPrice
                        ).toFixed(2)}</p>
                    </div>
                </a>
            `;
                        resultsGrid.appendChild(productCard);
                    });

                    resultsContainer.appendChild(resultsGrid);
                }

                modalContent.appendChild(resultsContainer);
                searchResultsModal.appendChild(modalContent);

                // Show the modal
                searchResultsModal.style.display = 'block';

                // Close button functionality
                const closeButton = document.querySelector('.close-search-results');
                closeButton.addEventListener('click', function () {
                    searchResultsModal.style.display = 'none';
                });

                // Close when clicking outside the modal
                window.addEventListener('click', function (event) {
                    if (event.target === searchResultsModal) {
                        searchResultsModal.style.display = 'none';
                    }
                });
            }

            function showSearchLoading() {
                // Create and show loading indicator
                const loadingOverlay = document.createElement('div');
                loadingOverlay.id = 'searchLoadingOverlay';
                loadingOverlay.className = 'search-loading-overlay';
                loadingOverlay.innerHTML = '<div class="search-loading-spinner"></div>';
                document.body.appendChild(loadingOverlay);
            }

            function hideSearchLoading() {
                // Remove loading indicator
                const loadingOverlay = document.getElementById('searchLoadingOverlay');
                if (loadingOverlay) {
                    loadingOverlay.remove();
                }
            }

            function showSearchError(message) {
                // Show error message in a toast notification
                const errorToast = document.createElement('div');
                errorToast.className = 'search-error-toast';
                errorToast.textContent = message;
                document.body.appendChild(errorToast);

                // Auto-remove after 3 seconds
                setTimeout(() => {
                    errorToast.classList.add('fade-out');
                    setTimeout(() => {
                        errorToast.remove();
                    }, 300);
                }, 3000);
            }
            // Cart functionality
            const cart = {
                items: [],
                get total() {
                    return this.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                },
                get itemCount() {
                    return this.items.reduce((count, item) => count + item.quantity, 0);
                },
                init() {
                    this.loadFromLocalStorage();
                    this.updateCartUI();
                    this.updateCartCounter();
                },
                addItem(product) {
                    return new Promise((resolve) => {
                        const existingItemIndex = this.items.findIndex(item =>
                            item.id === product.id &&
                            item.size === product.size &&
                            item.gender === product.gender &&
                            item.frontImage === product.frontImage
                        );

                        if (existingItemIndex >= 0) {
                            this.items[existingItemIndex].quantity += product.quantity;
                            this.showNotification('Quantity updated');
                        } else {
                            const newItem = {
                                id: product.id,
                                name: product.name || "Product",
                                frontImage: product.frontImage || "",
                                price: product.price || 0,
                                size: product.size || "M",
                                gender: product.gender || "men",
                                quantity: product.quantity || 1
                            };
                            this.items.push(newItem);
                            this.showNotification('Added to cart');
                        }

                        this.saveToLocalStorage();
                        this.updateCartUI();
                        this.updateCartCounter();
                        resolve();
                    });
                },
                removeItem(index) {
                    this.items.splice(index, 1);
                    this.saveToLocalStorage();
                    this.updateCartUI();
                    this.updateCartCounter();
                    this.showNotification('Item removed');
                },
                updateQuantity(index, newQuantity) {
                    if (newQuantity > 0) {
                        this.items[index].quantity = newQuantity;
                        this.saveToLocalStorage();
                        this.updateCartUI();
                        this.updateCartCounter();
                    }
                },
                saveToLocalStorage() {
                    localStorage.setItem('shoppingCart', JSON.stringify(this.items));
                },
                loadFromLocalStorage() {
                    const savedItems = localStorage.getItem('shoppingCart');
                    if (savedItems) {
                        try {
                            this.items = JSON.parse(savedItems);
                        } catch (e) {
                            console.error("Error loading cart:", e);
                            this.items = [];
                        }
                    }
                },
                updateCartUI() {
                    const cartItemsEl = document.getElementById('cartItems');
                    const cartTotalEl = document.getElementById('cartTotalPrice');

                    if (this.items.length === 0) {
                        cartItemsEl.innerHTML = '<div class="empty-cart">Your cart is empty</div>';
                    } else {
                        cartItemsEl.innerHTML = this.items.map((item, index) => `
                    <div class="cart-item">
                        <img src="${item.frontImage}" alt="${item.name}" class="cart-item-image">
                        <div class="cart-item-details">
                            <div class="cart-item-title">${item.name}</div>
                            <div class="cart-item-size">${item.gender === 'men' ? 'Men' : 'Women'}'s ${item.size}</div>
                            <div class="cart-item-quantity">
                                <button class="cart-item-decrease" data-index="${index}">-</button>
                                <input type="number" min="1" value="${item.quantity}" class="cart-item-quantity-input" data-index="${index}">
                                <button class="cart-item-increase" data-index="${index}">+</button>
                            </div>
                            <div class="cart-item-price">₱${(item.price * item.quantity).toFixed(2)}</div>
                            <button class="cart-item-remove" data-index="${index}">Remove</button>
                        </div>
                    </div>
                `).join('');

                        // Add event listeners for quantity changes
                        document.querySelectorAll('.cart-item-decrease').forEach(btn => {
                            btn.addEventListener('click', (e) => {
                                e.stopPropagation();
                                const index = e.target.getAttribute('data-index');
                                this.updateQuantity(index, this.items[index].quantity - 1);
                            });
                        });

                        document.querySelectorAll('.cart-item-increase').forEach(btn => {
                            btn.addEventListener('click', (e) => {
                                e.stopPropagation();
                                const index = e.target.getAttribute('data-index');
                                this.updateQuantity(index, this.items[index].quantity + 1);
                            });
                        });

                        document.querySelectorAll('.cart-item-quantity-input').forEach(input => {
                            input.addEventListener('change', (e) => {
                                e.stopPropagation();
                                const index = e.target.getAttribute('data-index');
                                const newQuantity = parseInt(e.target.value) || 1;
                                this.updateQuantity(index, newQuantity);
                            });
                        });

                        document.querySelectorAll('.cart-item-remove').forEach(btn => {
                            btn.addEventListener('click', (e) => {
                                e.stopPropagation();
                                const index = e.target.getAttribute('data-index');
                                this.removeItem(index);
                            });
                        });
                    }

                    cartTotalEl.textContent = `₱${this.total.toFixed(2)}`;
                },
                updateCartCounter() {
                    document.getElementById('cartCounter').textContent = this.itemCount;
                },
                showNotification(message) {
                    const notification = document.createElement('div');
                    notification.className = 'notification';
                    notification.textContent = message;
                    document.body.appendChild(notification);
                    setTimeout(() => notification.remove(), 2000);
                }
            };

            // Initialize cart
            cart.init();




            // Cart toggle functionality
            const cartSidebar = document.getElementById('cartSidebar');
            const cartOverlay = document.getElementById('cartOverlay');
            const closeCartBtn = document.getElementById('closeCartBtn');
            const cartIcon = document.getElementById('cartIcon');

            function openCart() {
                // Refresh cart data before opening
                cart.loadFromLocalStorage();
                cart.updateCartUI();

                cartSidebar.classList.add('active');
                cartOverlay.classList.add('active');
                document.body.style.overflow = 'hidden';
            }

            function closeCart() {
                cartSidebar.classList.remove('active');
                cartOverlay.classList.remove('active');
                document.body.style.overflow = '';
            }

            // Toggle cart when clicking cart icon
            cartIcon.addEventListener('click', function (e) {
                e.stopPropagation();
                openCart();
            });

            // Close cart when clicking overlay or close button
            cartOverlay.addEventListener('click', closeCart);
            closeCartBtn.addEventListener('click', closeCart);

            // Checkout button
            document.querySelector('.checkout-btn').addEventListener('click', function () {
                // Force refresh cart data from localStorage
                cart.loadFromLocalStorage();

                // Check if cart is empty
                if (cart.items.length === 0) {
                    alert('Your cart is empty. Please add items to your cart before proceeding to checkout.');
                    return;
                }

                closeCart();

                const shippingCost = cart.total >= 2000 ? 0 : 200;
                const totalPrice = cart.total.toFixed(2);
                const overallTotal = (cart.total + shippingCost).toFixed(2);

                // Update checkout modal with current cart items
                const checkoutCartItems = document.getElementById('checkoutCartItems');
                checkoutCartItems.innerHTML = cart.items.map(item => `
            <div class="checkout-cart-item">
                <img src="${item.frontImage}" alt="${item.name}">
                <div class="checkout-cart-item-details">
                    <div class="checkout-cart-item-title">${item.name}</div>
                    <div class="checkout-cart-item-info">
                        <span>${item.gender === 'men' ? 'Men' : 'Women'}'s ${item.size} × ${item.quantity}</span>
                        <span>₱${(item.price * item.quantity).toFixed(2)}</span>
                    </div>
                </div>
            </div>
        `).join('');

                // Update all summary sections
                document.getElementById('cartSubtotal').textContent = `₱${totalPrice}`;
                document.getElementById('summarySubtotal').textContent = `₱${totalPrice}`;
                document.getElementById('summaryShipping').textContent = `₱${shippingCost.toFixed(2)}`;
                document.getElementById('summaryTotal').textContent = `₱${overallTotal}`;

                // Show the modal
                document.getElementById('checkoutModal').style.display = 'block';
                document.body.classList.add('modal-open');
            });

            document.querySelector('.footer-column.form-column form').addEventListener('submit', function (e) {
                e.preventDefault();

                const form = e.target;
                const submitButton = form.querySelector('button[type="submit"]');
                const originalButtonText = submitButton.innerHTML;

                // Show loading state
                submitButton.innerHTML = '<i class="bi bi-arrow-repeat"></i> Sending...';
                submitButton.disabled = true;

                // Gather form data
                const formData = {
                    FirstName: form.querySelector('input[placeholder="Firstname"]').value,
                    LastName: form.querySelector('input[placeholder="Lastname"]').value,
                    ContactNumber: form.querySelector('input[placeholder="Contact Number"]').value,
                    Message: form.querySelector('textarea').value
                };

                // Send the data to the server
                fetch('/Order/SendFooterContactMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Handle success response
                        if (data.success) {
                            Swal.fire({
                                title: 'Message Sent!',
                                text: data.message,
                                icon: 'success',
                                confirmButtonColor: '#fb740f'
                            });
                            form.reset(); // Reset the form after successful submission
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: data.message,
                                icon: 'error',
                                confirmButtonColor: '#fb740f'
                            });
                        }
                    })
                    .catch(error => {
                        // Handle error response
                        Swal.fire({
                            title: 'Error',
                            text: 'There was a problem sending your message.',
                            icon: 'error',
                            confirmButtonColor: '#fb740f'
                        });
                    })
                    .finally(() => {
                        // Restore button state
                        submitButton.innerHTML = originalButtonText;
                        submitButton.disabled = false;
                    });
            });

            // Handle checkout form submission
            document.getElementById('checkoutForm').addEventListener('submit', function (event) {
                event.preventDefault();

                // Create order data
                const orderData = {
                    date: new Date().toISOString(),
                    items: [...cart.items],
                    total: cart.total,
                    shipping: cart.total >= 2000 ? 0 : 200,
                    paymentMethod: document.getElementById('paymentMethod').value,
                    status: "Processing",
                    customer: {
                        firstName: document.getElementById('firstName').value,
                        lastName: document.getElementById('lastName').value,
                        address: document.getElementById('address').value,
                        contactNumber: document.getElementById('contactNumber').value,
                        email: document.getElementById('email').value
                    }
                };

                const submitButton = document.querySelector('.submit-order');
                const originalButtonText = submitButton.innerHTML;
                submitButton.innerHTML = '<i class="bi bi-hourglass-split"></i> Processing...';
                submitButton.disabled = true;

                // Send order to server
                fetch('/Order/SendOrderEmail', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(orderData)
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Process order locally after successful email sending
                        orderHistory.addOrder(orderData);
                        showOrderConfirmation();

                        // Clear cart
                        cart.items = [];
                        cart.saveToLocalStorage();
                        cart.updateCartUI();
                        cart.updateCartCounter();

                        // Close modal
                        document.getElementById('checkoutModal').style.display = 'none';
                        document.body.classList.remove('modal-open');
                    })
                    .catch(error => {
                        console.error('Error sending order:', error);
                        alert('There was a problem processing your order. Please try again.');
                    })
                    .finally(() => {
                        submitButton.innerHTML = originalButtonText;
                        submitButton.disabled = false;
                    });
            });

            // Close modal
            document.getElementById('closeModalBtn').addEventListener('click', function () {
                document.getElementById('checkoutModal').style.display = 'none';
                document.body.classList.remove('modal-open');
            });

            // Order history functionality
            const orderHistory = {
                orders: [],
                init() {
                    this.loadFromLocalStorage();
                    this.updateOrderConfirmationIcon();
                },
                addOrder(orderData) {
                    this.orders.unshift(orderData);
                    this.saveToLocalStorage();
                    this.updateOrderConfirmationIcon();
                },
                saveToLocalStorage() {
                    localStorage.setItem('orderHistory', JSON.stringify(this.orders));
                },
                loadFromLocalStorage() {
                    const savedOrders = localStorage.getItem('orderHistory');
                    if (savedOrders) {
                        try {
                            this.orders = JSON.parse(savedOrders);
                        } catch (e) {
                            console.error("Error loading orders:", e);
                            this.orders = [];
                        }
                    }
                },
                updateOrderConfirmationIcon() {
                    const confirmationBadge = document.getElementById('orderConfirmationBadge');
                    if (this.orders.length > 0) {
                        confirmationBadge.textContent = this.orders.reduce((total, order) =>
                            total + order.items.reduce((sum, item) => sum + item.quantity, 0), 0);
                    } else {
                        confirmationBadge.textContent = '0';
                    }
                },
                displayOrders() {
                    const orderListContent = document.getElementById('orderListContent');

                    if (this.orders.length === 0) {
                        orderListContent.innerHTML = '<p>No orders found</p>';
                        return;
                    }

                    orderListContent.innerHTML = this.orders.map((order, orderIndex) => `
                <div class="order-item">
                    <h4>Order #${orderIndex + 1} - ${new Date(order.date).toLocaleString()}</h4>
                    <div class="customer-info">
                        <p><strong>Customer:</strong> ${order.customer.firstName} ${order.customer.lastName}</p>
                        <p><strong>Address:</strong> ${order.customer.address}</p>
                        <p><strong>Contact:</strong> ${order.customer.contactNumber}</p>
                    </div>

                    <h5>Items:</h5>
                    ${order.items.map(item => `
                        <div style="display: flex; margin-bottom: 10px;">
                            <img src="${item.frontImage}" alt="${item.name}" class="order-item-image">
                            <div class="order-item-details">
                                <p><strong>${item.name}</strong></p>
                                <p>${item.gender === 'men' ? 'Men' : 'Women'}'s ${item.size} × ${item.quantity}</p>
                                <p>₱${(item.price * item.quantity).toFixed(2)}</p>
                            </div>
                        </div>
                    `).join('')}

                    <div class="order-summary-section">
                        <p><strong>Subtotal:</strong> ₱${order.total.toFixed(2)}</p>
                        <p><strong>Shipping:</strong> ₱${order.shipping.toFixed(2)}</p>
                        <p><strong>Total:</strong> ₱${(order.total + order.shipping).toFixed(2)}</p>
                        <p><strong>Payment Method:</strong> ${order.paymentMethod}</p>
                        <p><strong>Status:</strong> ${order.status || 'Processing'}</p>
                    </div>
                </div>
            `).join('');
                }
            };

            // Initialize order history
            orderHistory.init();

            // Order list toggle functionality
            const orderListContainer = document.getElementById('orderListContainer');
            const orderListToggle = document.getElementById('orderListToggle');
            const closeOrderListBtn = document.getElementById('closeOrderListBtn');

            function toggleOrderList() {
                if (orderListContainer.style.display === 'block') {
                    orderListContainer.style.display = 'none';
                } else {
                    orderHistory.displayOrders();
                    orderListContainer.style.display = 'block';
                }
            }

            orderListToggle.addEventListener('click', toggleOrderList);
            closeOrderListBtn.addEventListener('click', () => {
                orderListContainer.style.display = 'none';
            });

            // Buy Now functionality
            document.addEventListener('buyNowClicked', async function (e) {
                const product = e.detail.product;

                // Clear cart and add only this product
                cart.items = [];
                await cart.addItem(product);

                // Proceed to checkout
                const shippingCost = cart.total >= 2000 ? 0 : 200;
                const totalPrice = cart.total.toFixed(2);
                const overallTotal = (cart.total + shippingCost).toFixed(2);

                // Update checkout modal
                const checkoutCartItems = document.getElementById('checkoutCartItems');
                checkoutCartItems.innerHTML = cart.items.map(item => `
            <div class="checkout-cart-item">
                <img src="${item.frontImage}" alt="${item.name}">
                <div class="checkout-cart-item-details">
                    <div class="checkout-cart-item-title">${item.name}</div>
                    <div class="checkout-cart-item-info">
                        <span>${item.gender === 'men' ? 'Men' : 'Women'}'s ${item.size} × ${item.quantity}</span>
                        <span>₱${(item.price * item.quantity).toFixed(2)}</span>
                    </div>
                </div>
            </div>
        `).join('');

                // Update summary sections
                document.getElementById('cartSubtotal').textContent = `₱${totalPrice}`;
                document.getElementById('summarySubtotal').textContent = `₱${totalPrice}`;
                document.getElementById('summaryShipping').textContent = `₱${shippingCost.toFixed(2)}`;
                document.getElementById('summaryTotal').textContent = `₱${overallTotal}`;

                // Show modal
                document.getElementById('checkoutModal').style.display = 'block';
                document.body.classList.add('modal-open');
            });

            // Order confirmation modal
            function showOrderConfirmation() {
                const confirmationModal = document.createElement('div');
                confirmationModal.className = 'order-confirmation-modal';
                confirmationModal.innerHTML = `
            <div class="confirmation-content">
                <div class="confirmation-header">
                    <i class="bi bi-check-circle-fill success-icon"></i>
                    <h2>Order Placed Successfully!</h2>
                </div>
                <div class="confirmation-body">
                    <p>Thank you for your order!</p>
                    <p>Your order has been received and is now being processed.</p>
                    <p>A confirmation email has been sent to your provided email address.</p>
                    <p>The shop owner has also been notified and will prepare your items shortly.</p>
                </div>
                <div class="confirmation-footer">
                    <button id="confirmationCloseBtn" class="confirmation-close-btn">Continue Shopping</button>
                </div>
            </div>
        `;

                document.body.appendChild(confirmationModal);

                // Add styles
                const style = document.createElement('style');
                style.textContent = `
            .order-confirmation-modal {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.7);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 10000;
            }
            .confirmation-content {
                background-color: white;
                border-radius: 8px;
                width: 90%;
                max-width: 500px;
                padding: 30px;
                text-align: center;
                box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            }
            .confirmation-header {
                margin-bottom: 20px;
            }
            .success-icon {
                font-size: 60px;
                color: #4CAF50;
                margin-bottom: 15px;
            }
            .confirmation-header h2 {
                color: #333;
                font-size: 24px;
                margin: 0;
            }
            .confirmation-body {
                color: #555;
                line-height: 1.6;
                margin-bottom: 25px;
            }
            .confirmation-close-btn {
                background-color: #fb740f;
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 4px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: background-color 0.3s;
            }
            .confirmation-close-btn:hover {
                background-color: #e06400;
            }
        `;
                document.head.appendChild(style);

                // Close button
                document.getElementById('confirmationCloseBtn').addEventListener('click', function () {
                    confirmationModal.remove();
                    style.remove();
                    window.location.href = '/Shop';
                });
            }

            // Mobile search toggle
            const mobileSearchToggle = document.getElementById('mobileSearchToggle');
            const searchContainer = document.querySelector('.search-container');

            mobileSearchToggle.addEventListener('click', function (e) {
                e.stopPropagation();
                document.body.classList.toggle('search-active');
            });

            document.addEventListener('click', function (e) {
                if (!searchContainer.contains(e.target) && e.target !== mobileSearchToggle) {
                    document.body.classList.remove('search-active');
                }
            });

            searchContainer.addEventListener('click', function (e) {
                e.stopPropagation();
            });

            // Navbar toggle for mobile
            const menuToggle = document.querySelector('.menu-toggle');
            const menuList = document.querySelector('.ul-navbar');
            const closeButtonNav = document.getElementById('closeButtonNav');
            const overlay = document.getElementById('overlay');
            let isMobileView = window.innerWidth <= 768;

            function toggleMenu() {
                if (menuList.classList.contains('active')) {
                    menuList.classList.remove('active');
                    closeButtonNav.style.display = 'none';
                    overlay.classList.remove('active');
                    document.body.classList.remove('no-scroll');
                } else {
                    menuList.classList.add('active');
                    closeButtonNav.style.display = 'block';
                    overlay.classList.add('active');
                    document.body.classList.add('no-scroll');
                }
            }

            closeButtonNav.addEventListener('click', function () {
                menuList.classList.remove('active');
                closeButtonNav.style.display = 'none';
                overlay.classList.remove('active');
                document.body.classList.remove('no-scroll');
            });

            overlay.addEventListener('click', function () {
                menuList.classList.remove('active');
                closeButtonNav.style.display = 'none';
                overlay.classList.remove('active');
                document.body.classList.remove('no-scroll');
            });

            if (isMobileView) {
                menuList.classList.remove('active');
                closeButtonNav.style.display = 'none';
                overlay.classList.remove('active');
                menuToggle.addEventListener('click', toggleMenu);
            } else {
                menuList.classList.add('active');
                closeButtonNav.style.display = 'none';
                overlay.classList.remove('active');
            }

            window.addEventListener('resize', function () {
                const currentIsMobile = window.innerWidth <= 768;
                if (isMobileView !== currentIsMobile) {
                    isMobileView = currentIsMobile;
                    if (currentIsMobile) {
                        menuList.classList.remove('active');
                        closeButtonNav.style.display = 'none';
                        overlay.classList.remove('active');
                        document.body.classList.remove('no-scroll');
                        menuToggle.addEventListener('click', toggleMenu);
                    } else {
                        menuList.classList.add('active');
                        closeButtonNav.style.display = 'none';
                        overlay.classList.remove('active');
                        document.body.classList.remove('no-scroll');
                        menuToggle.removeEventListener('click', toggleMenu);
                    }
                }
            });

            // Set active nav link
            function setActiveNavLink() {
                const currentUrl = window.location.pathname;
                const navLinks = document.querySelectorAll('.ul-navbar li a');

                navLinks.forEach(link => {
                    const parentLi = link.parentElement;
                    if (!parentLi.classList.contains('no-underline') && !parentLi.classList.contains('close-button-nav')) {
                        parentLi.classList.remove('active');
                    }
                });

                navLinks.forEach(link => {
                    const linkUrl = link.getAttribute('href');
                    const parentLi = link.parentElement;

                    if (parentLi.classList.contains('no-underline') || parentLi.classList.contains('close-button-nav')) {
                        return;
                    }

                    if ((linkUrl && currentUrl.includes(linkUrl) && linkUrl !== '/') ||
                        (linkUrl === '/' && (currentUrl === '/' || currentUrl === '/Home' || currentUrl === '/Home/Index'))) {
                        parentLi.classList.add('active');
                    }
                });
            }

            setActiveNavLink();
        });


    </script>



</body>
</html>

