@model Crayonlab.Models.ShopViewModel
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@Html.AntiForgeryToken()

@{
    ViewBag.Title = "Shop";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
<link href="https://fonts.cdnfonts.com/css/heaters" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<link rel="stylesheet" href="~/Content/StyleSheet.css">
<link rel="stylesheet" href="~/css/shop.css">

<main>
    @if (User.Identity.IsAuthenticated && Model.IsAdmin)
    {
    <div class="upload-container">
        <button class="upload-button" onclick="showUploadModal()">
            <i class="fas fa-upload button-icon"></i> Upload Design
        </button>
    </div>
    }

    @foreach (var shirtType in Model.ShirtTypes)
    {
    <div class="titles">
        <h1>@shirtType.Name.ToUpper()</h1>
        <p>COLLECTIONS</p>
    </div>

 <!-- Swiper Container for larger screens -->
    <div class="swiper-container swiper-@shirtType.Id">
        <div class="swiper-wrapper">
            @if (Model.DesignsByType.ContainsKey(shirtType.Id))
                {
                    foreach (var design in Model.DesignsByType[shirtType.Id])
                    {
            <div class="swiper-slide category @(design.IsActive ? "" : "unavailable")" data-id="@design.Id">
                <div class="category-image-container">
                    <a href="@Url.Action("Index", "Item", new {
                                    id = design.Id,
                                    name = design.Name,
                                    frontImage = design.FrontDesign,
                                    backImage = design.BackDesign,
                                    shortsImage = design.ShortsDesign,
                                    menXSPrice = design.MenXSPrice,
                                    menSPrice = design.MenSPrice,
                                    menMPrice = design.MenMPrice,
                                    menLPrice = design.MenLPrice,
                                    menXLPrice = design.MenXLPrice,
                                    menXXLPrice = design.MenXXLPrice,
                                    womenXSPrice = design.WomenXSPrice,
                                    womenSPrice = design.WomenSPrice,
                                    womenMPrice = design.WomenMPrice,
                                    womenLPrice = design.WomenLPrice,
                                    womenXLPrice = design.WomenXLPrice,
                                    womenXXLPrice = design.WomenXXLPrice
                                })">
                        <img src="@Url.Content("~/Content/uploads/" + design.FrontDesign)" class="main-image" alt="@design.Name">
                        @if (!string.IsNullOrEmpty(design.BackDesign))
                                    {
                        <img src="~/Content/uploads/@design.BackDesign" class="zoomed-image" alt="Back @design.Name">
                                    }
                        @if (!string.IsNullOrEmpty(design.ShortsDesign))
                                    {
                        <img src="~/Content/uploads/@design.ShortsDesign" class="third-image" alt="Shorts @design.Name">
                                    }
                    </a>
                    @if (!design.IsActive)
                                {
                    <div class="unavailable-overlay">Unavailable</div>
                                }
                </div>
                @if (Model.IsAdmin)
                            {
                <button class="availability-button"
                        data-design-id="@design.Id"
                        data-is-active="@design.IsActive.ToString().ToLower()"
                        onclick="toggleAvailability(this)">
                    <span>@(design.IsActive ? "Make Unavailable" : "Make Available")</span>
                </button>
                            }
            </div>
                    }
                }
        </div>

        <!-- Pagination -->
        <div class="swiper-pagination"></div>

        <!-- Navigation buttons -->
        <div class="swiper-button-next"></div>
        <div class="swiper-button-prev"></div>
    </div>

 <!-- Grid Container for Mobile View -->
    <div class="grid-container">
        @if (Model.DesignsByType.ContainsKey(shirtType.Id))
            {
                foreach (var design in Model.DesignsByType[shirtType.Id])
                {
        <div class="category @(design.IsActive ? "" : "unavailable")" data-id="@design.Id">
            <div class="category-image-container">
                <a href="@Url.Action("Index", "Item", new {
                                id = design.Id,
                                frontImage = design.FrontDesign,
                                backImage = design.BackDesign,
                                shortsImage = design.ShortsDesign,
                                menXSPrice = design.MenXSPrice,
                                menSPrice = design.MenSPrice,
                                menMPrice = design.MenMPrice,
                                menLPrice = design.MenLPrice,
                                menXLPrice = design.MenXLPrice,
                                menXXLPrice = design.MenXXLPrice,
                                womenXSPrice = design.WomenXSPrice,
                                womenSPrice = design.WomenSPrice,
                                womenMPrice = design.WomenMPrice,
                                womenLPrice = design.WomenLPrice,
                                womenXLPrice = design.WomenXLPrice,
                                womenXXLPrice = design.WomenXXLPrice
                            })">
                    <img src="@Url.Content("~/Content/uploads/" + design.FrontDesign)" class="main-image" alt="@design.Name">
                    @if (!string.IsNullOrEmpty(design.BackDesign))
                                {
                    <img src="~/Content/uploads/@design.BackDesign" class="zoomed-image" alt="Back @design.Name">
                                }
                    @if (!string.IsNullOrEmpty(design.ShortsDesign))
                                {
                    <img src="~/Content/uploads/@design.ShortsDesign" class="third-image" alt="Shorts @design.Name">
                                }
                </a>
                @if (!design.IsActive)
                            {
                <div class="unavailable-overlay">Unavailable</div>
                            }
            </div>
            @if (Model.IsAdmin)
                        {
            <button class="availability-button"
                    data-design-id="@design.Id"
                    data-is-active="@design.IsActive.ToString().ToLower()"
                    onclick="toggleAvailability(this)">
                <span>@(design.IsActive ? "Make Unavailable" : "Make Available")</span>
            </button>
                        }
        </div>
                }
            }
    </div>
    }
</main>

<!-- Upload Modal -->
<div id="uploadModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeUploadModal()">&times;</span>
        <h2>Upload Shirt Design</h2>
        <form id="uploadForm" enctype="multipart/form-data">
            <label for="shirtType">Shirt Type:</label>
            <select id="shirtType" name="ShirtTypeId" required>
                @foreach (var type in Model.ShirtTypes)
                {
                <option value="@type.Id">@type.Name</option>
                }
            </select>

            <label for="name">Design Name:</label>
            <input type="text" id="name" name="Name" required />

            <label for="frontDesign">Front Design:</label>
            <input type="file" id="frontDesign" name="FrontDesign" accept="image/*" required />

            <label for="backDesign">Back Design:</label>
            <input type="file" id="backDesign" name="BackDesign" accept="image/*" />

            <label for="shortsDesign">Lower Design (Optional):</label>
            <input type="file" id="shortsDesign" name="ShortsDesign" accept="image/*" />

            <h3>Prices</h3>
            <h4>Men's Sizes</h4>
            <div class="price-grid">
                <div>
                    <label for="menXSPrice">XS:</label>
                    <input type="number" id="menXSPrice" name="MenXSPrice" step="0.01" min="0" required />
                </div>
                <div>
                    <label for="menSPrice">S:</label>
                    <input type="number" id="menSPrice" name="MenSPrice" step="0.01" min="0" required />
                </div>
                <div>
                    <label for="menMPrice">M:</label>
                    <input type="number" id="menMPrice" name="MenMPrice" step="0.01" min="0" required />
                </div>
                <div>
                    <label for="menLPrice">L:</label>
                    <input type="number" id="menLPrice" name="MenLPrice" step="0.01" min="0" required />
                </div>
                <div>
                    <label for="menXLPrice">XL:</label>
                    <input type="number" id="menXLPrice" name="MenXLPrice" step="0.01" min="0" required />
                </div>
                <div>
                    <label for="menXXLPrice">XXL:</label>
                    <input type="number" id="menXXLPrice" name="MenXXLPrice" step="0.01" min="0" required />
                </div>
            </div>

            <h4>Women's Sizes</h4>
            <div class="price-grid">
                <div>
                    <label for="womenXSPrice">XS:</label>
                    <input type="number" id="womenXSPrice" name="WomenXSPrice" step="0.01" min="0" required />
                </div>
                <div>
                    <label for="womenSPrice">S:</label>
                    <input type="number" id="womenSPrice" name="WomenSPrice" step="0.01" min="0" required />
                </div>
                <div>
                    <label for="womenMPrice">M:</label>
                    <input type="number" id="womenMPrice" name="WomenMPrice" step="0.01" min="0" required />
                </div>
                <div>
                    <label for="womenLPrice">L:</label>
                    <input type="number" id="womenLPrice" name="WomenLPrice" step="0.01" min="0" required />
                </div>
                <div>
                    <label for="womenXLPrice">XL:</label>
                    <input type="number" id="womenXLPrice" name="WomenXLPrice" step="0.01" min="0" required />
                </div>
                <div>
                    <label for="womenXXLPrice">XXL:</label>
                    <input type="number" id="womenXXLPrice" name="WomenXXLPrice" step="0.01" min="0" required />
                </div>
            </div>

            <button type="submit">Upload</button>
        </form>
    </div>
</div>

<script>
    // Initialize all swipers
    document.addEventListener('DOMContentLoaded', function() {
        initializeSwipers();
        setupResponsiveBehavior();
        setupImageHoverEffects();
    });

    function initializeSwipers() {
        @foreach (var shirtType in Model.ShirtTypes)
        {
            <text>
            new Swiper('.swiper-@shirtType.Id', {
                slidesPerView: 8,  // Changed from 4 to 8
                spaceBetween: 10,  // Reduced space between slides
                loop: true,        // Enable loop for continuous scrolling
                centeredSlides: false,
                autoplay: {        // Add autoplay for automatic scrolling
                    delay: 4000,   // 3 seconds delay between slides
                    disableOnInteraction: false  // Continue autoplay after user interaction
                },
                pagination: {
                    el: '.swiper-@shirtType.Id .swiper-pagination',
                    clickable: true,
                },
                navigation: {
                    nextEl: '.swiper-@shirtType.Id .swiper-button-next',
                    prevEl: '.swiper-@shirtType.Id .swiper-button-prev',
                },
                breakpoints: {
                    320: {
                        slidesPerView: 2,  // Show 2 slides on very small screens
                        spaceBetween: 5
                    },
                    480: {
                        slidesPerView: 3,  // Show 3 slides on small screens
                        spaceBetween: 10
                    },
                    768: {
                        slidesPerView: 5,  // Show 5 slides on medium screens
                        spaceBetween: 15
                    },
                    1024: {
                        slidesPerView: 6,  // Show 6 slides on large screens
                        spaceBetween: 15
                    },
                    1280: {
                        slidesPerView: 8,  // Show all 8 slides on extra large screens
                        spaceBetween: 10
                    }
                }
            });
            </text>
        }
    }

    function setupResponsiveBehavior() {
        function handleResize() {
            const gridContainers = document.querySelectorAll('.grid-container');
            const swiperContainers = document.querySelectorAll('.swiper-container');

            if (window.innerWidth <= 768) {
                // Mobile view - show grid, hide swiper
                gridContainers.forEach(container => container.style.display = 'grid');
                swiperContainers.forEach(container => container.style.display = 'none');
            } else {
                // Desktop view - show swiper, hide grid
                gridContainers.forEach(container => container.style.display = 'none');
                swiperContainers.forEach(container => container.style.display = 'block');
            }
        }

        // Initial check
        handleResize();

        // Add event listener
        window.addEventListener('resize', handleResize);
    }

    function toggleAvailability(buttonElement) {
        const button = buttonElement;
        const designId = button.dataset.designId;
        const currentStatus = button.dataset.isActive === 'true';
        const newStatus = !currentStatus;

        // Show loading state
        button.disabled = true;
        const originalText = button.querySelector('span').textContent;
        button.querySelector('span').textContent = 'Processing...';

        fetch(`/Shop/ToggleAvailability?id=${designId}&isActive=${newStatus}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ id: designId, isActive: newStatus })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Update button text and data attribute
                button.dataset.isActive = newStatus.toString();
                button.querySelector('span').textContent = newStatus ? 'Make Unavailable' : 'Make Available';

                // Update parent container class
                const categoryContainer = button.closest('.category');
                if (newStatus) {
                    categoryContainer.classList.remove('unavailable');
                } else {
                    categoryContainer.classList.add('unavailable');
                }
            } else {
                alert('Failed to update availability: ' + data.message);
                button.querySelector('span').textContent = originalText;
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while updating availability');
            button.querySelector('span').textContent = originalText;
        })
        .finally(() => {
            button.disabled = false;
        });
    }

    // Modal functions
    function showUploadModal() {
        document.getElementById('uploadModal').style.display = 'block';
    }

    function closeUploadModal() {
        document.getElementById('uploadModal').style.display = 'none';
    }

    // Handle upload form submission
    document.getElementById('uploadForm').addEventListener('submit', function(e) {
        e.preventDefault();

        const form = this;
        const formData = new FormData(form);

        // Show loading state or spinner
        const submitButton = form.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.textContent;
        submitButton.textContent = 'Uploading...';
        submitButton.disabled = true;

        fetch('/Shop/UploadDesign', {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                alert('Design uploaded successfully!');
                closeUploadModal();
                // Refresh the page to show the new design
                window.location.reload();
            } else {
                alert('Upload failed: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred during upload');
        })
        .finally(() => {
            submitButton.textContent = originalButtonText;
            submitButton.disabled = false;
        });
    });

    // Close modal when clicking outside of it
    window.onclick = function(event) {
        const modal = document.getElementById('uploadModal');
        if (event.target === modal) {
            closeUploadModal();
        }
    };
</script>
