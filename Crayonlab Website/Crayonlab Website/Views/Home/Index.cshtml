@{
    ViewBag.Title = "Home";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/Content/StyleSheet.css">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="~/css/modal.css">

<!-- Hero Section -->
<section class="hero">
    <div class="hero-overlay"></div>
    <div class="hero-content">
        <h1>DEFINE YOUR VIBE</h1>
        <p>Style that empowers your every move</p>
        <a href="@Url.Action("Index", "Shop")" class="shop-button">SHOP COLLECTIONS</a>
    </div>
</section>

<!-- Explore More Section -->
<section class="explore-more">
    <div class="section-header">
        <h2>Explore More About Our Product</h2>
        <p>We know what buyers are looking for and they want top products for clients' needs.</p>
    </div>

    <div class="swiper">
        <div class="swiper-wrapper">
            <div class="swiper-slide category">
                <div class="category-label">LONGSLEEVE</div>
                <div class="category-image-container">
                    <img src="~/Content/assets/image1.png" class="main-image">
                    <img src="~/Content/assets/image2.png" class="zoomed-image">
                </div>
            </div>
            <div class="swiper-slide category">
                <div class="category-label">CORPORATE</div>
                <div class="category-image-container">
                    <img src="~/Content/assets/image3.png" class="main-image">
                    <img src="~/Content/assets/image4.png" class="zoomed-image">
                </div>
            </div>
            <div class="swiper-slide category">
                <div class="category-label">ESPORT</div>
                <div class="category-image-container">
                    <img src="~/Content/assets/image5.png" class="main-image">
                    <img src="~/Content/assets/image6.png" class="zoomed-image">
                </div>
            </div>
            <div class="swiper-slide category">
                <div class="category-label">JERSEY</div>
                <div class="category-image-container">
                    <img src="~/Content/assets/image7.png" class="main-image">
                    <img src="~/Content/assets/image8.png" class="zoomed-image">
                    <img src="~/Content/assets/image9.png" class="third-image">
                </div>
            </div>
        </div>
        <div class="swiper-button-next"></div>
        <div class="swiper-button-prev"></div>
    </div>

    <form action="@Url.Action("Index", "Product")" method="get">
        <button type="submit" class="custom-button">Customize Your Own Design</button>
    </form>
</section>



<!-- About Us Section -->
<section class="about-us">
    <div class="section-header">
        <h2>ABOUT US</h2>
    </div>
    <p class="about-description">
        Welcome to CrayonLab, where creativity meets fashion! We specialize in high-quality <br class="desktop-only" />
        apparel and sublimation printing, transforming ideas into vibrant, wearable art.<br class="desktop-only" />
        Our mission is to empower individuals to express their unique style through<br class="desktop-only" />
        custom designs that pop with color and personality.
    </p>

    <div class="about-images">
        <div class="about-image">
            <img src="~/Content/assets/about1.png" alt="Heat Pressing Process">
            <div class="about-label">Heat Pressing Process</div>
        </div>
        <div class="about-image">
            <img src="~/Content/assets/about2.png" alt="Stitching Service">
            <div class="about-label">Stitching Service</div>
        </div>
        <div class="about-image">
            <img src="~/Content/assets/about3.png" alt="Design Service">
            <div class="about-label">Design Service</div>
        </div>
    </div>
</section>



<!-- News and Updates Section -->
<section class="news-updates">
    <div class="section-header">
        <h2>NEWS AND UPDATES</h2>
    </div>
    @if (User.Identity.IsAuthenticated)
    {
    <div class="upload">
        <button id="uploadnews" class="upload-button">Upload News</button>
    </div>
    }

    <div class="news-slider-container">
        <div class="news-slider">
            @if (Model.NewsandUpdate != null && Model.NewsandUpdate.Any())
            {
                foreach (var news in Model.NewsandUpdate)
                {
            <div class="news-item" data-id="@news.Id">
                <div class="separator">
                    <img src="@news.Image" alt="@news.Description" loading="lazy">
                    <div class="news-description tooltip">@news.Description</div>
                </div>
                @if (User.Identity.IsAuthenticated)
                        {
                <button class="delete-news" data-id="@news.Id">×</button>
                        }
            </div>
                }
            }
            else
            {
            <div class="no-news">
                <p>No news available yet.</p>
            </div>
            }
        </div>
        <div class="news-pagination"></div>
    </div>
</section>

<!-- News Upload Modal -->
<div id="newsUploadModal" class="modal" style="display:none;">
    <div class="modal-content">
        <span class="close-news-button">&times;</span>
        <h2>Upload News</h2>
        <form id="newsUploadForm">
            <div class="form-group">
                <label for="newsImage">Image:</label>
                <input type="file" id="newsImage" name="image" accept="image/*" required>
            </div>
            <div class="form-group">
                <label for="newsDescription">Description:</label>
                <textarea id="newsDescription" name="description" required></textarea>
            </div>
            <button type="submit">Upload</button>
        </form>
    </div>
</div>



@using Crayonlab.Models
@model ShopViewModel

<!-- Our Partners Section -->
<section class="our-partners">
    <div class="section-header">
        <h2>OUR PARTNERS</h2>
    </div>
    @if (User.Identity.IsAuthenticated)
{
    <div class="upload">
        <button id="uploadpartners" class="upload-button">Upload Partners</button>
    </div>
}
    <div class="partners-container">
        @if (Model.Partners != null && Model.Partners.Any())
        {
            foreach (var partner in Model.Partners)
            {
        <div class="partner-image" data-id="@partner.Id">
            <div class="separator">

                <img src="@partner.Image" alt="@partner.Description" loading="lazy">
                <div class="description tooltip">@partner.Description</div>
            </div>



            @if (User.Identity.IsAuthenticated)
                    {
            <button class="delete-partner" data-id="@partner.Id">×</button>
                    }

        </div>

            }

        }
        else
        {
        <div class="no-partners">
            <p>No partners available yet.</p>
        </div>
        }
    </div>
</section>

<!-- Upload Modal -->
<div id="uploadModal" class="modal" style="display:none;">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Upload Partner</h2>
        <form id="uploadForm">
            <div class="form-group">
                <label for="image">Image:</label>
                <input type="file" id="image" name="image" accept="image/*" required>
            </div>
            <div class="form-group">
                <label for="description">Description:</label>
                <textarea id="description" name="description" required></textarea>
            </div>
            <button type="submit">Upload</button>
        </form>
    </div>
</div>

<!-- Include Swiper JS -->
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function () {
    // Initialize authentication state
    const isAuthenticated = @Json.Serialize(User.Identity.IsAuthenticated);

    // Initialize Swiper
    var swiper = new Swiper('.swiper', {
        slidesPerView: 1,
        spaceBetween: 20,
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
        },
        breakpoints: {
            640: { slidesPerView: 2 },
            768: { slidesPerView: 2 },
            1024: { slidesPerView: 4 }
        }
    });

    // Modal functionality
    const uploadModal = document.getElementById('uploadModal');
    const uploadForm = document.getElementById('uploadForm');
    const uploadBtn = document.getElementById('uploadpartners');

    if (uploadBtn) {
        uploadBtn.addEventListener('click', function (e) {
            e.preventDefault();
            uploadModal.style.display = 'block';
        });
    }

    document.querySelector('.close-button')?.addEventListener('click', function () {
        uploadModal.style.display = 'none';
    });

    window.addEventListener('click', function (e) {
        if (e.target === uploadModal) {
            uploadModal.style.display = 'none';
        }
    });

    // Form submission
    if (uploadForm) {
        uploadForm.addEventListener('submit', async function (e) {
            e.preventDefault();
            const formData = new FormData(this);
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;

            submitBtn.disabled = true;
            submitBtn.textContent = 'Uploading...';

            try {
                const response = await fetch('/Home/UploadPartner', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.message || 'Upload failed');
                }

                updatePartnersUI(data);
                uploadModal.style.display = 'none';
                this.reset();
                showToast('Partner uploaded successfully!', 'success');
            } catch (error) {
                showToast(error.message, 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            }
        });
    }


    // Add this to your existing DOMContentLoaded event listener

    // News slider functionality
    function initNewsSlider() {
        const newsSlider = document.querySelector('.news-slider');
        const newsItems = document.querySelectorAll('.news-item');

        if (!newsSlider || newsItems.length === 0) return;

        // Add navigation buttons
        const sliderContainer = document.querySelector('.news-slider-container');
        const prevBtn = document.createElement('button');
        prevBtn.className = 'nav-button nav-prev';
        prevBtn.innerHTML = '❮';

        const nextBtn = document.createElement('button');
        nextBtn.className = 'nav-button nav-next';
        nextBtn.innerHTML = '❯';

        sliderContainer.appendChild(prevBtn);
        sliderContainer.appendChild(nextBtn);

        // Create pagination dots
        const paginationContainer = document.querySelector('.news-pagination');
        const itemWidth = newsItems[0].offsetWidth + 20; // Including gap
        const containerWidth = newsSlider.offsetWidth;
        const visibleItems = Math.min(3, Math.floor(containerWidth / itemWidth));
        const totalPages = Math.ceil(newsItems.length / visibleItems);

        for (let i = 0; i < totalPages; i++) {
            const dot = document.createElement('div');
            dot.className = 'pagination-dot' + (i === 0 ? ' active' : '');
            dot.dataset.page = i;
            paginationContainer.appendChild(dot);

            dot.addEventListener('click', () => {
                scrollToPage(i);
                updateActiveDot(i);
            });
        }

        // Navigation button click handlers
        let currentPage = 0;

        prevBtn.addEventListener('click', () => {
            if (currentPage > 0) {
                currentPage--;
                scrollToPage(currentPage);
                updateActiveDot(currentPage);
            }
        });

        nextBtn.addEventListener('click', () => {
            if (currentPage < totalPages - 1) {
                currentPage++;
                scrollToPage(currentPage);
                updateActiveDot(currentPage);
            }
        });

        // Function to scroll to specific page
        function scrollToPage(pageIndex) {
            const scrollPosition = pageIndex * visibleItems * itemWidth;
            newsSlider.scrollTo({
                left: scrollPosition,
                behavior: 'smooth'
            });
        }

        // Function to update active pagination dot
        function updateActiveDot(pageIndex) {
            document.querySelectorAll('.pagination-dot').forEach((dot, index) => {
                dot.classList.toggle('active', index === pageIndex);
            });
        }

        // Handle scroll events to update pagination
        newsSlider.addEventListener('scroll', () => {
            const scrollPosition = newsSlider.scrollLeft;
            const newPage = Math.round(scrollPosition / (visibleItems * itemWidth));

            if (newPage !== currentPage) {
                currentPage = newPage;
                updateActiveDot(currentPage);
            }
        });
    }

    // News Upload Modal functionality
    const newsUploadModal = document.getElementById('newsUploadModal');
    const newsUploadForm = document.getElementById('newsUploadForm');
    const uploadNewsBtn = document.getElementById('uploadnews');

    if (uploadNewsBtn) {
        uploadNewsBtn.addEventListener('click', function (e) {
            e.preventDefault();
            newsUploadModal.style.display = 'block';
        });
    }

    document.querySelector('.close-news-button')?.addEventListener('click', function () {
        newsUploadModal.style.display = 'none';
    });

    window.addEventListener('click', function (e) {
        if (e.target === newsUploadModal) {
            newsUploadModal.style.display = 'none';
        }
    });

    // News Upload Form submission
    if (newsUploadForm) {
        newsUploadForm.addEventListener('submit', async function (e) {
            e.preventDefault();
            const formData = new FormData(this);
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;

            submitBtn.disabled = true;
            submitBtn.textContent = 'Uploading...';

            try {
                const response = await fetch('/Home/UploadNewsUpdate', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.message || 'Upload failed');
                }

                updateNewsUI(data);
                newsUploadModal.style.display = 'none';
                this.reset();
                showToast('News uploaded successfully!', 'success');

                // Reinitialize the slider after adding new content
                initNewsSlider();
            } catch (error) {
                showToast(error.message, 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            }
        });
    }

    // Initialize delete news buttons
    document.querySelectorAll('.delete-news').forEach(button => {
        button.addEventListener('click', function (e) {
            e.stopPropagation();
            deleteNews.call(this, e);
        });
    });

    // Delete news function
    async function deleteNews(event) {
        event.stopPropagation();
        const newsId = this.getAttribute('data-id');
        const newsItem = this.closest('.news-item');

        if (!confirm('Are you sure you want to delete this news item?')) {
            return;
        }

        try {
            const response = await fetch('/Home/DeleteNewsUpdate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ id: newsId })
            });

            const data = await response.json();

            if (data.success) {
                newsItem.remove();
                checkEmptyNews();
                showToast('News deleted successfully!', 'success');

                // Reinitialize the slider after removing content
                initNewsSlider();
            } else {
                throw new Error(data.message || 'Failed to delete news');
            }
        } catch (error) {
            showToast(error.message, 'error');
        }
    }

    // Helper function to update News UI
    function updateNewsUI(data) {
        const newsSlider = document.querySelector('.news-slider');
        const noNews = document.querySelector('.no-news');

        if (noNews) {
            noNews.remove();
        }

        const newsItem = document.createElement('div');
        newsItem.className = 'news-item';
        newsItem.dataset.id = data.id;
        newsItem.innerHTML = `
        <div class="separator">
            <img src="${data.imageUrl}" alt="${data.description}" loading="lazy">
            <div class="news-description tooltip">${data.description}</div>
        </div>
        ${isAuthenticated ? `<button class="delete-news" data-id="${data.id}">×</button>` : ''}
    `;

        newsSlider.prepend(newsItem);

        if (isAuthenticated) {
            newsItem.querySelector('.delete-news').addEventListener('click', function (e) {
                e.stopPropagation();
                deleteNews.call(this, e);
            });
        }
    }

    // Helper function to check if news container is empty
    function checkEmptyNews() {
        const newsSlider = document.querySelector('.news-slider');
        if (newsSlider.querySelectorAll('.news-item').length === 0) {
            newsSlider.innerHTML = '<div class="no-news"><p>No news available yet.</p></div>';
        }
    }

    // Initialize the news slider on page load
    initNewsSlider();

    // Partner image click functionality
    document.querySelectorAll('.partner-image').forEach(partner => {
        partner.addEventListener('click', function(e) {
            // Don't do anything if delete button was clicked
            if (e.target.classList.contains('delete-partner')) {
                return;
            }

            // Remove active class from all other partners
            document.querySelectorAll('.partner-image').forEach(p => {
                if (p !== this) p.classList.remove('active');
            });

            // Toggle active class on clicked partner
            this.classList.toggle('active');
        });
    });

    // Close descriptions when clicking outside
    document.addEventListener('click', function(e) {
        if (!e.target.closest('.partner-image')) {
            document.querySelectorAll('.partner-image').forEach(partner => {
                partner.classList.remove('active');
            });
        }
    });

    // Initialize delete buttons
    document.querySelectorAll('.delete-partner').forEach(button => {
        button.addEventListener('click', function(e) {
            e.stopPropagation(); // Prevent triggering the parent click event
            deletePartner.call(this, e); // Call deletePartner with proper context
        });
    });

    // Delete partner function
    async function deletePartner(event) {
        event.stopPropagation();
        const partnerId = this.getAttribute('data-id');
        const partnerDiv = this.closest('.partner-image');

        if (!confirm('Are you sure you want to delete this partner?')) {
            return;
        }

        try {
            const response = await fetch('/Home/DeletePartner', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ id: partnerId })
            });

            const data = await response.json();

            if (data.success) {
                partnerDiv.remove();
                checkEmptyPartners();
                showToast('Partner deleted successfully!', 'success');
            } else {
                throw new Error(data.message || 'Failed to delete partner');
            }
        } catch (error) {
            showToast(error.message, 'error');
        }
    }

    // Helper functions
    function updatePartnersUI(data) {
        const partnersContainer = document.querySelector('.partners-container');
        const noPartners = partnersContainer.querySelector('.no-partners');

        if (noPartners) {
            noPartners.remove();
        }

        const partnerDiv = document.createElement('div');
        partnerDiv.className = 'partner-image';
        partnerDiv.dataset.id = data.id;
        partnerDiv.innerHTML = `
            <div class="separator">
                <img src="${data.imageUrl}" alt="${data.description}" loading="lazy">
                <div class="description tooltip">${data.description}</div>
            </div>
            ${isAuthenticated ? `<button class="delete-partner" data-id="${data.id}">×</button>` : ''}
        `;

        partnersContainer.prepend(partnerDiv);

        // Add click event to new partner
        partnerDiv.addEventListener('click', function(e) {
            if (!e.target.classList.contains('delete-partner')) {
                document.querySelectorAll('.partner-image').forEach(p => {
                    if (p !== this) p.classList.remove('active');
                });
                this.classList.toggle('active');
            }
        });

        if (isAuthenticated) {
            partnerDiv.querySelector('.delete-partner').addEventListener('click', function(e) {
                e.stopPropagation();
                deletePartner.call(this, e);
            });
        }
    }

    function checkEmptyPartners() {
        const partnersContainer = document.querySelector('.partners-container');
        if (partnersContainer.querySelectorAll('.partner-image').length === 0) {
            partnersContainer.innerHTML = '<div class="no-partners"><p>No partners available yet.</p></div>';
        }
    }

    function showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.textContent = message;
        document.body.appendChild(toast);

        setTimeout(() => {
            toast.classList.add('show');
        }, 10);

        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }
});
</script>

<style>
    /* Toast styles */
    .toast {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        opacity: 0;
        transition: opacity 0.5s ease;
        z-index: 1000;
    }

        .toast.show {
            opacity: 1;
        }

        .toast.success {
            background-color: green;
        }

        .toast.error {
            background-color: red;
        }

    /* Delete button styles */
    .partner-image {
        position: relative;
    }

    .delete-partner {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: rgba(255, 0, 0, 0.7);
        color: white;
        border: none;
        border-radius: 50%;
        width: 25px;
        height: 25px;
        font-size: 12px;
        cursor: pointer;
        display: none;
    }

    .partner-image:hover .delete-partner {
        display: block;
    }
</style>